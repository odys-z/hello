/*
ID: odys.zh1
LANG: C++
TASK: sort3
 */
#include <iostream>
#include <fstream>

using namespace std;

0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17	18	19	20	21	22	23	24	25	26	27	28	29	30	31	32	33	34	35	36	37	38	39	40	41	42	43	44	45	46	47	48	49
1	1	1	3	1	3	2	1	2	3	3	1	3	2	1	1	2	3	2	2	3	3	2	3	2	2	3	1	1	1	1	1	1	1	3	1	1	2	2	3	1	1	3	3	2	1	1	1	3	2
3	'35	1	1	1	3	1	3	2	1	2	3	3	1	3	2	1	1	2	3	2	2	3	3	2	3	2	2	3	1	1	1	1	1	1	1	3	1	1	2	2	3	1	1	3	3	2	1	1	1	3	2
5	'36	1	1	1	1	1	3	2	1	2	3	3	1	3	2	1	1	2	3	2	2	3	3	2	3	2	2	3	1	1	1	1	1	1	1	3	3	1	2	2	3	1	1	3	3	2	1	1	1	3	2
6	'27	1	1	1	1	1	1	2	1	2	3	3	1	3	2	1	1	2	3	2	2	3	3	2	3	2	2	3	1	1	1	1	1	1	1	3	3	3	2	2	3	1	1	3	3	2	1	1	1	3	2
8	'28	1	1	1	1	1	1	1	1	2	3	3	1	3	2	1	1	2	3	2	2	3	3	2	3	2	2	3	2	1	1	1	1	1	1	3	3	3	2	2	3	1	1	3	3	2	1	1	1	3	2
9	'37	1	1	1	1	1	1	1	1	1	3	3	1	3	2	1	1	2	3	2	2	3	3	2	3	2	2	3	2	2	1	1	1	1	1	3	3	3	2	2	3	1	1	3	3	2	1	1	1	3	2
9	'29	1	1	1	1	1	1	1	1	1	2	3	1	3	2	1	1	2	3	2	2	3	3	2	3	2	2	3	2	2	1	1	1	1	1	3	3	3	3	2	3	1	1	3	3	2	1	1	1	3	2
10	'38	1	1	1	1	1	1	1	1	1	1	3	1	3	2	1	1	2	3	2	2	3	3	2	3	2	2	3	2	2	2	1	1	1	1	3	3	3	3	2	3	1	1	3	3	2	1	1	1	3	2
10	'30	1	1	1	1	1	1	1	1	1	1	2	1	3	2	1	1	2	3	2	2	3	3	2	3	2	2	3	2	2	2	1	1	1	1	3	3	3	3	3	3	1	1	3	3	2	1	1	1	3	2
12	'40	1	1	1	1	1	1	1	1	1	1	1	1	3	2	1	1	2	3	2	2	3	3	2	3	2	2	3	2	2	2	2	1	1	1	3	3	3	3	3	3	1	1	3	3	2	1	1	1	3	2
13	'31	1	1	1	1	1	1	1	1	1	1	1	1	1	2	1	1	2	3	2	2	3	3	2	3	2	2	3	2	2	2	2	1	1	1	3	3	3	3	3	3	3	1	3	3	2	1	1	1	3	2
16	'32	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	2	3	2	2	3	3	2	3	2	2	3	2	2	2	2	2	1	1	3	3	3	3	3	3	3	1	3	3	2	1	1	1	3	2
17	'41	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	3	2	2	3	3	2	3	2	2	3	2	2	2	2	2	2	1	3	3	3	3	3	3	3	1	3	3	2	1	1	1	3	2
18	'33	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	2	2	3	3	2	3	2	2	3	2	2	2	2	2	2	1	3	3	3	3	3	3	3	3	3	3	2	1	1	1	3	2
19	'45	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	2	3	3	2	3	2	2	3	2	2	2	2	2	2	2	3	3	3	3	3	3	3	3	3	3	2	1	1	1	3	2
20	'44	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	3	3	2	3	2	2	3	2	2	2	2	2	2	2	3	3	3	3	3	3	3	3	3	3	2	2	1	1	3	2
20	'46	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	2	3	2	3	2	2	3	2	2	2	2	2	2	2	3	3	3	3	3	3	3	3	3	3	3	2	1	1	3	2
21	'45	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	3	2	3	2	2	3	2	2	2	2	2	2	2	3	3	3	3	3	3	3	3	3	3	3	2	2	1	3	2
21	'47	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	2	2	3	2	2	3	2	2	2	2	2	2	2	3	3	3	3	3	3	3	3	3	3	3	3	2	1	3	2
23	'46	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	2	3	2	2	3	2	2	2	2	2	2	2	3	3	3	3	3	3	3	3	3	3	3	3	2	2	3	2
26	'47	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	2	2	2	2	3	2	2	2	2	2	2	2	3	3	3	3	3	3	3	3	3	3	3	3	3	2	3	2
34	'49	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	2	2	2	2	2	2	2	2	2	2	2	2	3	3	3	3	3	3	3	3	3	3	3	3	3	3	3	2

output: 21
answer: 18

int countpq(int counts[], int len, int seq[])
{
    int count = 0;
    for (int x = 0; x < len; x++) {
        int v = seq[x];
        if ( x < counts[v-1] )
            for (int j = counts[v-1]; j < len; j++)
            {
                if (seq[j] < v)
                {
                    cout << x << " '" << j << "    ";
                    for (int c = 0; c < len; c++)
                        cout << seq[c] << ' ' ;
                    cout << endl;

                    int t = seq[j]; seq[j] = seq[x]; seq[x] = t;
                    count++;
                    if ( x < counts[t-1])
                        x--;

                    break;
                }
            }
    }
    return count;
}

int main()
{

//    int len = 9;
//    int seq[] = {2, 2, 1, 3, 3, 3, 2, 3, 1};
//    //           1  1  2  2  2  3  3  3  3
//    //                 1  2  3
//    int counts[] = {0, 2, 5, 9};

    int len;
    ifstream fin;
    fin.open("sort3.in");
    fin >> len;
    int seq[len];
    int counts[] = {0, 0, 0, 0};
    for (int i = 0; i < len; i++) {
        fin >> seq[i];
        counts[seq[i]] += 1;
    }
    fin.close();

    for (int i = 1; i < 4; i++) {
        counts[i] = counts[i - 1] + counts[i];
    }

                    cout << "      ";
                    for (int c = 0; c < len; c++)
                        cout << seq[c] << ' ' ;
                    cout << endl;

    int c = countpq(counts, len, seq);
    ofstream fout;
    fout.open("sort3.out");
    fout << c << endl;
    fout.close();

    return 0;
}
